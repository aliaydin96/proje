// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2018 15:27:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    garden_water
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module garden_water_vlg_sample_tst(
	clk,
	start_button,
	switch,
	sampler_tx
);
input  clk;
input  start_button;
input [1:0] switch;
output sampler_tx;

reg sample;
time current_time;
always @(clk or start_button or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module garden_water_vlg_check_tst (
	led_out,
	seven_display,
	sampler_rx
);
input [9:0] led_out;
input [6:0] seven_display;
input sampler_rx;

reg [9:0] led_out_expected;
reg [6:0] seven_display_expected;

reg [9:0] led_out_prev;
reg [6:0] seven_display_prev;

reg [9:0] led_out_expected_prev;
reg [6:0] seven_display_expected_prev;

reg [9:0] last_led_out_exp;
reg [6:0] last_seven_display_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_out_prev = led_out;
	seven_display_prev = seven_display;
end

// update expected /o prevs

always @(trigger)
begin
	led_out_expected_prev = led_out_expected;
	seven_display_expected_prev = seven_display_expected;
end


// expected led_out[ 9 ]
initial
begin
	led_out_expected[9] = 1'bX;
end 
// expected led_out[ 8 ]
initial
begin
	led_out_expected[8] = 1'bX;
end 
// expected led_out[ 7 ]
initial
begin
	led_out_expected[7] = 1'bX;
end 
// expected led_out[ 6 ]
initial
begin
	led_out_expected[6] = 1'bX;
end 
// expected led_out[ 5 ]
initial
begin
	led_out_expected[5] = 1'bX;
end 
// expected led_out[ 4 ]
initial
begin
	led_out_expected[4] = 1'bX;
end 
// expected led_out[ 3 ]
initial
begin
	led_out_expected[3] = 1'bX;
end 
// expected led_out[ 2 ]
initial
begin
	led_out_expected[2] = 1'bX;
end 
// expected led_out[ 1 ]
initial
begin
	led_out_expected[1] = 1'bX;
end 
// expected led_out[ 0 ]
initial
begin
	led_out_expected[0] = 1'bX;
end 
// expected seven_display[ 6 ]
initial
begin
	seven_display_expected[6] = 1'bX;
end 
// expected seven_display[ 5 ]
initial
begin
	seven_display_expected[5] = 1'bX;
end 
// expected seven_display[ 4 ]
initial
begin
	seven_display_expected[4] = 1'bX;
end 
// expected seven_display[ 3 ]
initial
begin
	seven_display_expected[3] = 1'bX;
end 
// expected seven_display[ 2 ]
initial
begin
	seven_display_expected[2] = 1'bX;
end 
// expected seven_display[ 1 ]
initial
begin
	seven_display_expected[1] = 1'bX;
end 
// expected seven_display[ 0 ]
initial
begin
	seven_display_expected[0] = 1'bX;
end 
// generate trigger
always @(led_out_expected or led_out or seven_display_expected or seven_display)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_out = %b | expected seven_display = %b | ",led_out_expected_prev,seven_display_expected_prev);
	$display("| real led_out = %b | real seven_display = %b | ",led_out_prev,seven_display_prev);
`endif
	if (
		( led_out_expected_prev[0] !== 1'bx ) && ( led_out_prev[0] !== led_out_expected_prev[0] )
		&& ((led_out_expected_prev[0] !== last_led_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[0] = led_out_expected_prev[0];
	end
	if (
		( led_out_expected_prev[1] !== 1'bx ) && ( led_out_prev[1] !== led_out_expected_prev[1] )
		&& ((led_out_expected_prev[1] !== last_led_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[1] = led_out_expected_prev[1];
	end
	if (
		( led_out_expected_prev[2] !== 1'bx ) && ( led_out_prev[2] !== led_out_expected_prev[2] )
		&& ((led_out_expected_prev[2] !== last_led_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[2] = led_out_expected_prev[2];
	end
	if (
		( led_out_expected_prev[3] !== 1'bx ) && ( led_out_prev[3] !== led_out_expected_prev[3] )
		&& ((led_out_expected_prev[3] !== last_led_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[3] = led_out_expected_prev[3];
	end
	if (
		( led_out_expected_prev[4] !== 1'bx ) && ( led_out_prev[4] !== led_out_expected_prev[4] )
		&& ((led_out_expected_prev[4] !== last_led_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[4] = led_out_expected_prev[4];
	end
	if (
		( led_out_expected_prev[5] !== 1'bx ) && ( led_out_prev[5] !== led_out_expected_prev[5] )
		&& ((led_out_expected_prev[5] !== last_led_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[5] = led_out_expected_prev[5];
	end
	if (
		( led_out_expected_prev[6] !== 1'bx ) && ( led_out_prev[6] !== led_out_expected_prev[6] )
		&& ((led_out_expected_prev[6] !== last_led_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[6] = led_out_expected_prev[6];
	end
	if (
		( led_out_expected_prev[7] !== 1'bx ) && ( led_out_prev[7] !== led_out_expected_prev[7] )
		&& ((led_out_expected_prev[7] !== last_led_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[7] = led_out_expected_prev[7];
	end
	if (
		( led_out_expected_prev[8] !== 1'bx ) && ( led_out_prev[8] !== led_out_expected_prev[8] )
		&& ((led_out_expected_prev[8] !== last_led_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[8] = led_out_expected_prev[8];
	end
	if (
		( led_out_expected_prev[9] !== 1'bx ) && ( led_out_prev[9] !== led_out_expected_prev[9] )
		&& ((led_out_expected_prev[9] !== last_led_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_expected_prev);
		$display ("     Real value = %b", led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_exp[9] = led_out_expected_prev[9];
	end
	if (
		( seven_display_expected_prev[0] !== 1'bx ) && ( seven_display_prev[0] !== seven_display_expected_prev[0] )
		&& ((seven_display_expected_prev[0] !== last_seven_display_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[0] = seven_display_expected_prev[0];
	end
	if (
		( seven_display_expected_prev[1] !== 1'bx ) && ( seven_display_prev[1] !== seven_display_expected_prev[1] )
		&& ((seven_display_expected_prev[1] !== last_seven_display_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[1] = seven_display_expected_prev[1];
	end
	if (
		( seven_display_expected_prev[2] !== 1'bx ) && ( seven_display_prev[2] !== seven_display_expected_prev[2] )
		&& ((seven_display_expected_prev[2] !== last_seven_display_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[2] = seven_display_expected_prev[2];
	end
	if (
		( seven_display_expected_prev[3] !== 1'bx ) && ( seven_display_prev[3] !== seven_display_expected_prev[3] )
		&& ((seven_display_expected_prev[3] !== last_seven_display_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[3] = seven_display_expected_prev[3];
	end
	if (
		( seven_display_expected_prev[4] !== 1'bx ) && ( seven_display_prev[4] !== seven_display_expected_prev[4] )
		&& ((seven_display_expected_prev[4] !== last_seven_display_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[4] = seven_display_expected_prev[4];
	end
	if (
		( seven_display_expected_prev[5] !== 1'bx ) && ( seven_display_prev[5] !== seven_display_expected_prev[5] )
		&& ((seven_display_expected_prev[5] !== last_seven_display_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[5] = seven_display_expected_prev[5];
	end
	if (
		( seven_display_expected_prev[6] !== 1'bx ) && ( seven_display_prev[6] !== seven_display_expected_prev[6] )
		&& ((seven_display_expected_prev[6] !== last_seven_display_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seven_display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seven_display_expected_prev);
		$display ("     Real value = %b", seven_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seven_display_exp[6] = seven_display_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module garden_water_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start_button;
reg [1:0] switch;
// wires                                               
wire [9:0] led_out;
wire [6:0] seven_display;

wire sampler;                             

// assign statements (if any)                          
garden_water i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.led_out(led_out),
	.seven_display(seven_display),
	.start_button(start_button),
	.switch(switch)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// start_button
initial
begin
	start_button = 1'b1;
end 
// switch[ 1 ]
always
begin
	switch[1] = 1'b0;
	switch[1] = #500000 1'b1;
	#500000;
end 
// switch[ 0 ]
always
begin
	switch[0] = 1'b0;
	switch[0] = #250000 1'b1;
	#250000;
end 

garden_water_vlg_sample_tst tb_sample (
	.clk(clk),
	.start_button(start_button),
	.switch(switch),
	.sampler_tx(sampler)
);

garden_water_vlg_check_tst tb_out(
	.led_out(led_out),
	.seven_display(seven_display),
	.sampler_rx(sampler)
);
endmodule

