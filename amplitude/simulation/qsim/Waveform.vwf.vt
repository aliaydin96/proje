// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2018 14:03:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          amplitude
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module amplitude_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] voltage;
// wires                                               
wire [15:0] out;

// assign statements (if any)                          
amplitude i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.out(out),
	.voltage(voltage)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// voltage[ 15 ]
initial
begin
	voltage[15] = 1'b0;
	voltage[15] = #330000 1'b1;
	voltage[15] = #30000 1'b0;
end 
// voltage[ 14 ]
initial
begin
	voltage[14] = 1'b0;
	voltage[14] = #290000 1'b1;
	voltage[14] = #40000 1'b0;
	voltage[14] = #30000 1'b1;
	voltage[14] = #50000 1'b0;
end 
// voltage[ 13 ]
initial
begin
	voltage[13] = 1'b0;
	voltage[13] = #290000 1'b1;
	voltage[13] = #40000 1'b0;
	voltage[13] = #30000 1'b1;
	voltage[13] = #50000 1'b0;
end 
// voltage[ 12 ]
initial
begin
	voltage[12] = 1'b0;
	voltage[12] = #250000 1'b1;
	voltage[12] = #40000 1'b0;
	voltage[12] = #120000 1'b1;
	voltage[12] = #40000 1'b0;
end 
// voltage[ 11 ]
initial
begin
	voltage[11] = 1'b0;
	voltage[11] = #250000 1'b1;
	voltage[11] = #40000 1'b0;
	voltage[11] = #120000 1'b1;
	voltage[11] = #40000 1'b0;
end 
// voltage[ 10 ]
initial
begin
	voltage[10] = 1'b0;
	voltage[10] = #210000 1'b1;
	voltage[10] = #40000 1'b0;
	voltage[10] = #200000 1'b1;
	voltage[10] = #40000 1'b0;
end 
// voltage[ 9 ]
initial
begin
	voltage[9] = 1'b0;
	voltage[9] = #210000 1'b1;
	voltage[9] = #40000 1'b0;
	voltage[9] = #200000 1'b1;
	voltage[9] = #40000 1'b0;
end 
// voltage[ 8 ]
initial
begin
	voltage[8] = 1'b0;
	voltage[8] = #170000 1'b1;
	voltage[8] = #40000 1'b0;
	voltage[8] = #280000 1'b1;
	voltage[8] = #50000 1'b0;
end 
// voltage[ 7 ]
initial
begin
	voltage[7] = 1'b0;
	voltage[7] = #170000 1'b1;
	voltage[7] = #40000 1'b0;
	voltage[7] = #280000 1'b1;
	voltage[7] = #50000 1'b0;
end 
// voltage[ 6 ]
initial
begin
	voltage[6] = 1'b0;
	voltage[6] = #130000 1'b1;
	voltage[6] = #40000 1'b0;
	voltage[6] = #370000 1'b1;
	voltage[6] = #40000 1'b0;
end 
// voltage[ 5 ]
initial
begin
	voltage[5] = 1'b0;
	voltage[5] = #130000 1'b1;
	voltage[5] = #40000 1'b0;
	voltage[5] = #370000 1'b1;
	voltage[5] = #40000 1'b0;
end 
// voltage[ 4 ]
initial
begin
	voltage[4] = 1'b0;
	voltage[4] = #90000 1'b1;
	voltage[4] = #40000 1'b0;
	voltage[4] = #450000 1'b1;
	voltage[4] = #30000 1'b0;
end 
// voltage[ 3 ]
initial
begin
	voltage[3] = 1'b0;
	voltage[3] = #90000 1'b1;
	voltage[3] = #40000 1'b0;
	voltage[3] = #450000 1'b1;
	voltage[3] = #30000 1'b0;
end 
// voltage[ 2 ]
initial
begin
	voltage[2] = 1'b0;
	voltage[2] = #50000 1'b1;
	voltage[2] = #40000 1'b0;
	voltage[2] = #520000 1'b1;
	voltage[2] = #40000 1'b0;
end 
// voltage[ 1 ]
initial
begin
	voltage[1] = 1'b0;
	voltage[1] = #50000 1'b1;
	voltage[1] = #40000 1'b0;
	voltage[1] = #520000 1'b1;
	voltage[1] = #40000 1'b0;
end 
// voltage[ 0 ]
initial
begin
	voltage[0] = 1'b1;
	voltage[0] = #50000 1'b0;
	voltage[0] = #600000 1'b1;
	voltage[0] = #50000 1'b0;
end 
endmodule

